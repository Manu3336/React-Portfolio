{"ast":null,"code":"import _objectSpread from \"/Users/manukapoor/Desktop/manu/react-apps/firstapp/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/manukapoor/Desktop/manu/react-apps/firstapp/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/manukapoor/Desktop/manu/react-apps/firstapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/manukapoor/Desktop/manu/react-apps/firstapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/manukapoor/Desktop/manu/react-apps/firstapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/manukapoor/Desktop/manu/react-apps/firstapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/manukapoor/Desktop/manu/react-apps/firstapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/manukapoor/Desktop/manu/react-apps/firstapp/src/Portfolio/Portfolio.js\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { elementType } from 'prop-types-extra';\nimport uncontrollable from 'uncontrollable';\nimport createWithBsPrefix from './utils/createWithBsPrefix';\nimport NavbarBrand from './NavbarBrand';\nimport NavbarCollapse from './NavbarCollapse';\nimport NavbarToggle from './NavbarToggle';\nimport { createBootstrapComponent } from './ThemeProvider';\nimport NavbarContext from './NavbarContext';\nimport SelectableContext from './SelectableContext';\nvar propTypes = {\n  /** @default 'navbar' */\n  bsPrefix: PropTypes.string.isRequired,\n\n  /**\n   * The general visual variant a the Navbar.\n   * Use in combination with the `bg` prop, `background-color` utilities,\n   * or your own background styles.\n   *\n   * @type {('light'|'dark')}\n   */\n  variant: PropTypes.string,\n\n  /**\n   * The breakpoint, below which, the Navbar will collapse.\n   * When `true` the Navbar will always be expanded regardless of screen size.\n   */\n  expand: PropTypes.oneOf([true, 'sm', 'md', 'lg', 'xl']).isRequired,\n\n  /**\n   * A convenience prop for adding `bg-*` utility classes since they are so commonly used here.\n   * `light` and `dark` are common choices but any `bg-*` class is supported, including any custom ones you might define.\n   *\n   * Pairs nicely with the `variant` prop.\n   */\n  bg: PropTypes.string,\n\n  /**\n   * Create a fixed navbar along the top or bottom of the screen, that scrolls with the\n   * page. A convenience prop for the `fixed-*` positioning classes.\n   */\n  fixed: PropTypes.oneOf(['top', 'bottom']),\n\n  /**\n   * Position the navbar at the top or bottom of the viewport,\n   * but only after scrolling past it. . A convenience prop for the `sticky-*` positioning classes.\n   *\n   *  __Not supported in <= IE11 and other older browsers without a polyfill__\n   */\n  sticky: PropTypes.oneOf(['top', 'bottom']),\n\n  /**\n   * Set a custom element for this component.\n   */\n  as: elementType,\n\n  /**\n   * A callback fired when the `<Navbar>` body collapses or expands. Fired when\n   * a `<Navbar.Toggle>` is clicked and called with the new `expanded`\n   * boolean value.\n   *\n   * @controllable expanded\n   */\n  onToggle: PropTypes.func,\n\n  /**\n   * A callback fired when a descendant of a child `<Nav>` is selected. Should\n   * be used to execute complex closing or other miscellaneous actions desired\n   * after selecting a descendant of `<Nav>`. Does nothing if no `<Nav>` or `<Nav>`\n   * descendants exist. The callback is called with an eventKey, which is a\n   * prop from the selected `<Nav>` descendant, and an event.\n   *\n   * ```js\n   * function (\n   *  eventKey: mixed,\n   *  event?: SyntheticEvent\n   * )\n   * ```\n   *\n   * For basic closing behavior after all `<Nav>` descendant onSelect events in\n   * mobile viewports, try using collapseOnSelect.\n   *\n   * Note: If you are manually closing the navbar using this `OnSelect` prop,\n   * ensure that you are setting `expanded` to false and not *toggling* between\n   * true and false.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * Toggles `expanded` to `false` after the onSelect event of a descendant of a\n   * child `<Nav>` fires. Does nothing if no `<Nav>` or `<Nav>` descendants exist.\n   *\n   * Manually controlling `expanded` via the onSelect callback is recommended instead,\n   * for more complex operations that need to be executed after\n   * the `select` event of `<Nav>` descendants.\n   */\n  collapseOnSelect: PropTypes.bool,\n\n  /**\n   * Controls the visiblity of the navbar body\n   *\n   * @controllable onToggle\n   */\n  expanded: PropTypes.bool,\n\n  /**\n   * The ARIA role for the navbar, will default to 'navigation' for\n   * Navbars whose `as` is something other than `<nav>`.\n   *\n   * @default 'navigation'\n   */\n  role: PropTypes.string\n};\nvar defaultProps = {\n  as: 'nav',\n  expand: true,\n  variant: 'light',\n  collapseOnSelect: false\n};\n\nvar Navbar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Navbar, _React$Component);\n\n  function Navbar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Navbar);\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Navbar)).call.apply(_getPrototypeOf2, [this].concat(_args)));\n\n    _this.handleCollapse = function () {\n      var _this$props = _this.props,\n          onToggle = _this$props.onToggle,\n          expanded = _this$props.expanded,\n          collapseOnSelect = _this$props.collapseOnSelect,\n          onSelect = _this$props.onSelect;\n      if (onSelect) onSelect.apply(void 0, arguments);\n\n      if (collapseOnSelect && expanded) {\n        onToggle(false);\n      }\n    };\n\n    _this.handleToggle = function () {\n      var _this$props2 = _this.props,\n          onToggle = _this$props2.onToggle,\n          expanded = _this$props2.expanded;\n      onToggle(!expanded);\n    };\n\n    _this.state = {\n      navbarContext: {\n        onToggle: _this.handleToggle\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Navbar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          bsPrefix = _this$props3.bsPrefix,\n          expand = _this$props3.expand,\n          variant = _this$props3.variant,\n          bg = _this$props3.bg,\n          fixed = _this$props3.fixed,\n          sticky = _this$props3.sticky,\n          className = _this$props3.className,\n          children = _this$props3.children,\n          Component = _this$props3.as,\n          _1 = _this$props3.expanded,\n          _2 = _this$props3.onToggle,\n          _3 = _this$props3.onSelect,\n          _4 = _this$props3.collapseOnSelect,\n          props = _objectWithoutProperties(_this$props3, [\"bsPrefix\", \"expand\", \"variant\", \"bg\", \"fixed\", \"sticky\", \"className\", \"children\", \"as\", \"expanded\", \"onToggle\", \"onSelect\", \"collapseOnSelect\"]); // will result in some false positives but that seems better\n      // than false negatives. strict `undefined` check allows explicit\n      // \"nulling\" of the role if the user really doesn't want one\n\n\n      if (props.role === undefined && Component !== 'nav') {\n        props.role = 'navigation';\n      }\n\n      var expandClass = \"\".concat(bsPrefix, \"-expand\");\n      if (typeof expand === 'string') expandClass = \"\".concat(expandClass, \"-\").concat(expand);\n      return React.createElement(NavbarContext.Provider, {\n        value: this.state.navbarContext,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(SelectableContext.Provider, {\n        value: this.handleCollapse,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(Component, Object.assign({}, props, {\n        className: classNames(className, bsPrefix, expand && expandClass, variant && \"\".concat(bsPrefix, \"-\").concat(variant), bg && \"bg-\".concat(bg), sticky && \"sticky-\".concat(sticky), fixed && \"fixed-\".concat(fixed)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }), children)));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(_ref, prevState) {\n      var bsPrefix = _ref.bsPrefix,\n          expanded = _ref.expanded;\n      return {\n        navbarContext: _objectSpread({}, prevState.navbarContext, {\n          bsPrefix: bsPrefix,\n          expanded: expanded\n        })\n      };\n    }\n  }]);\n\n  return Navbar;\n}(React.Component);\n\nNavbar.propTypes = propTypes;\nNavbar.defaultProps = defaultProps;\nvar DecoratedNavbar = createBootstrapComponent(uncontrollable(Navbar, {\n  expanded: 'onToggle'\n}), 'navbar');\nDecoratedNavbar.Brand = NavbarBrand;\nDecoratedNavbar.Toggle = NavbarToggle;\nDecoratedNavbar.Collapse = NavbarCollapse;\nDecoratedNavbar.Text = createWithBsPrefix('navbar-text', {\n  Component: 'span'\n});\nexport default DecoratedNavbar;","map":{"version":3,"sources":["/Users/manukapoor/Desktop/manu/react-apps/firstapp/src/Portfolio/Portfolio.js"],"names":["classNames","React","PropTypes","elementType","uncontrollable","createWithBsPrefix","NavbarBrand","NavbarCollapse","NavbarToggle","createBootstrapComponent","NavbarContext","SelectableContext","propTypes","bsPrefix","string","isRequired","variant","expand","oneOf","bg","fixed","sticky","as","onToggle","func","onSelect","collapseOnSelect","bool","expanded","role","defaultProps","Navbar","args","handleCollapse","props","handleToggle","state","navbarContext","className","children","Component","_1","_2","_3","_4","undefined","expandClass","prevState","DecoratedNavbar","Brand","Toggle","Collapse","Text"],"mappings":"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","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { elementType } from 'prop-types-extra';\nimport uncontrollable from 'uncontrollable';\n\nimport createWithBsPrefix from './utils/createWithBsPrefix';\nimport NavbarBrand from './NavbarBrand';\nimport NavbarCollapse from './NavbarCollapse';\nimport NavbarToggle from './NavbarToggle';\nimport { createBootstrapComponent } from './ThemeProvider';\nimport NavbarContext from './NavbarContext';\nimport SelectableContext from './SelectableContext';\n\nconst propTypes = {\n  /** @default 'navbar' */\n  bsPrefix: PropTypes.string.isRequired,\n\n  /**\n   * The general visual variant a the Navbar.\n   * Use in combination with the `bg` prop, `background-color` utilities,\n   * or your own background styles.\n   *\n   * @type {('light'|'dark')}\n   */\n  variant: PropTypes.string,\n\n  /**\n   * The breakpoint, below which, the Navbar will collapse.\n   * When `true` the Navbar will always be expanded regardless of screen size.\n   */\n  expand: PropTypes.oneOf([true, 'sm', 'md', 'lg', 'xl']).isRequired,\n\n  /**\n   * A convenience prop for adding `bg-*` utility classes since they are so commonly used here.\n   * `light` and `dark` are common choices but any `bg-*` class is supported, including any custom ones you might define.\n   *\n   * Pairs nicely with the `variant` prop.\n   */\n  bg: PropTypes.string,\n\n  /**\n   * Create a fixed navbar along the top or bottom of the screen, that scrolls with the\n   * page. A convenience prop for the `fixed-*` positioning classes.\n   */\n  fixed: PropTypes.oneOf(['top', 'bottom']),\n\n  /**\n   * Position the navbar at the top or bottom of the viewport,\n   * but only after scrolling past it. . A convenience prop for the `sticky-*` positioning classes.\n   *\n   *  __Not supported in <= IE11 and other older browsers without a polyfill__\n   */\n  sticky: PropTypes.oneOf(['top', 'bottom']),\n\n  /**\n   * Set a custom element for this component.\n   */\n  as: elementType,\n\n  /**\n   * A callback fired when the `<Navbar>` body collapses or expands. Fired when\n   * a `<Navbar.Toggle>` is clicked and called with the new `expanded`\n   * boolean value.\n   *\n   * @controllable expanded\n   */\n  onToggle: PropTypes.func,\n\n  /**\n   * A callback fired when a descendant of a child `<Nav>` is selected. Should\n   * be used to execute complex closing or other miscellaneous actions desired\n   * after selecting a descendant of `<Nav>`. Does nothing if no `<Nav>` or `<Nav>`\n   * descendants exist. The callback is called with an eventKey, which is a\n   * prop from the selected `<Nav>` descendant, and an event.\n   *\n   * ```js\n   * function (\n   *  eventKey: mixed,\n   *  event?: SyntheticEvent\n   * )\n   * ```\n   *\n   * For basic closing behavior after all `<Nav>` descendant onSelect events in\n   * mobile viewports, try using collapseOnSelect.\n   *\n   * Note: If you are manually closing the navbar using this `OnSelect` prop,\n   * ensure that you are setting `expanded` to false and not *toggling* between\n   * true and false.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * Toggles `expanded` to `false` after the onSelect event of a descendant of a\n   * child `<Nav>` fires. Does nothing if no `<Nav>` or `<Nav>` descendants exist.\n   *\n   * Manually controlling `expanded` via the onSelect callback is recommended instead,\n   * for more complex operations that need to be executed after\n   * the `select` event of `<Nav>` descendants.\n   */\n  collapseOnSelect: PropTypes.bool,\n\n  /**\n   * Controls the visiblity of the navbar body\n   *\n   * @controllable onToggle\n   */\n  expanded: PropTypes.bool,\n\n  /**\n   * The ARIA role for the navbar, will default to 'navigation' for\n   * Navbars whose `as` is something other than `<nav>`.\n   *\n   * @default 'navigation'\n   */\n  role: PropTypes.string,\n};\n\nconst defaultProps = {\n  as: 'nav',\n  expand: true,\n  variant: 'light',\n  collapseOnSelect: false,\n};\n\nclass Navbar extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.state = {\n      navbarContext: {\n        onToggle: this.handleToggle,\n      },\n    };\n  }\n\n  static getDerivedStateFromProps({ bsPrefix, expanded }, prevState) {\n    return {\n      navbarContext: {\n        ...prevState.navbarContext,\n        bsPrefix,\n        expanded,\n      },\n    };\n  }\n\n  handleCollapse = (...args) => {\n    const { onToggle, expanded, collapseOnSelect, onSelect } = this.props;\n\n    if (onSelect) onSelect(...args);\n    if (collapseOnSelect && expanded) {\n      onToggle(false);\n    }\n  };\n\n  handleToggle = () => {\n    const { onToggle, expanded } = this.props;\n\n    onToggle(!expanded);\n  };\n\n  render() {\n    const {\n      bsPrefix,\n      expand,\n      variant,\n      bg,\n      fixed,\n      sticky,\n      className,\n      children,\n      as: Component,\n      expanded: _1,\n      onToggle: _2,\n      onSelect: _3,\n      collapseOnSelect: _4,\n      ...props\n    } = this.props;\n\n    // will result in some false positives but that seems better\n    // than false negatives. strict `undefined` check allows explicit\n    // \"nulling\" of the role if the user really doesn't want one\n    if (props.role === undefined && Component !== 'nav') {\n      props.role = 'navigation';\n    }\n    let expandClass = `${bsPrefix}-expand`;\n    if (typeof expand === 'string') expandClass = `${expandClass}-${expand}`;\n\n    return (\n      <NavbarContext.Provider value={this.state.navbarContext}>\n        <SelectableContext.Provider value={this.handleCollapse}>\n          <Component\n            {...props}\n            className={classNames(\n              className,\n              bsPrefix,\n              expand && expandClass,\n              variant && `${bsPrefix}-${variant}`,\n              bg && `bg-${bg}`,\n              sticky && `sticky-${sticky}`,\n              fixed && `fixed-${fixed}`,\n            )}\n          >\n            {children}\n          </Component>\n        </SelectableContext.Provider>\n      </NavbarContext.Provider>\n    );\n  }\n}\n\nNavbar.propTypes = propTypes;\nNavbar.defaultProps = defaultProps;\n\nconst DecoratedNavbar = createBootstrapComponent(\n  uncontrollable(Navbar, { expanded: 'onToggle' }),\n  'navbar',\n);\n\nDecoratedNavbar.Brand = NavbarBrand;\nDecoratedNavbar.Toggle = NavbarToggle;\nDecoratedNavbar.Collapse = NavbarCollapse;\n\nDecoratedNavbar.Text = createWithBsPrefix('navbar-text', {\n  Component: 'span',\n});\n\nexport default DecoratedNavbar;"]},"metadata":{},"sourceType":"module"}